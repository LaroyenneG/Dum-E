/*
 * generated by Xtext 2.17.0
 */
grammar InternalDume;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package dume.compiler.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package dume.compiler.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import dume.compiler.services.DumeGrammarAccess;

}
@parser::members {
	private DumeGrammarAccess grammarAccess;

	public void setGrammarAccess(DumeGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleScripts
entryRuleScripts
:
{ before(grammarAccess.getScriptsRule()); }
	 ruleScripts
{ after(grammarAccess.getScriptsRule()); } 
	 EOF 
;

// Rule Scripts
ruleScripts 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getScriptsAccess().getScriptAssignment()); }
		(rule__Scripts__ScriptAssignment)*
		{ after(grammarAccess.getScriptsAccess().getScriptAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleScript
entryRuleScript
:
{ before(grammarAccess.getScriptRule()); }
	 ruleScript
{ after(grammarAccess.getScriptRule()); } 
	 EOF 
;

// Rule Script
ruleScript 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getScriptAccess().getGroup()); }
		(rule__Script__Group__0)
		{ after(grammarAccess.getScriptAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInstruction
entryRuleInstruction
:
{ before(grammarAccess.getInstructionRule()); }
	 ruleInstruction
{ after(grammarAccess.getInstructionRule()); } 
	 EOF 
;

// Rule Instruction
ruleInstruction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInstructionAccess().getAlternatives()); }
		(rule__Instruction__Alternatives)
		{ after(grammarAccess.getInstructionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMap
entryRuleMap
:
{ before(grammarAccess.getMapRule()); }
	 ruleMap
{ after(grammarAccess.getMapRule()); } 
	 EOF 
;

// Rule Map
ruleMap 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMapAccess().getAlternatives()); }
		(rule__Map__Alternatives)
		{ after(grammarAccess.getMapAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePoint3D
entryRulePoint3D
:
{ before(grammarAccess.getPoint3DRule()); }
	 rulePoint3D
{ after(grammarAccess.getPoint3DRule()); } 
	 EOF 
;

// Rule Point3D
rulePoint3D 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPoint3DAccess().getGroup()); }
		(rule__Point3D__Group__0)
		{ after(grammarAccess.getPoint3DAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePoint2D
entryRulePoint2D
:
{ before(grammarAccess.getPoint2DRule()); }
	 rulePoint2D
{ after(grammarAccess.getPoint2DRule()); } 
	 EOF 
;

// Rule Point2D
rulePoint2D 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPoint2DAccess().getGroup()); }
		(rule__Point2D__Group__0)
		{ after(grammarAccess.getPoint2DAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePoint
entryRulePoint
:
{ before(grammarAccess.getPointRule()); }
	 rulePoint
{ after(grammarAccess.getPointRule()); } 
	 EOF 
;

// Rule Point
rulePoint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPointAccess().getAlternatives()); }
		(rule__Point__Alternatives)
		{ after(grammarAccess.getPointAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleShape
entryRuleShape
:
{ before(grammarAccess.getShapeRule()); }
	 ruleShape
{ after(grammarAccess.getShapeRule()); } 
	 EOF 
;

// Rule Shape
ruleShape 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShapeAccess().getAlternatives()); }
		(rule__Shape__Alternatives)
		{ after(grammarAccess.getShapeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleShape3D
entryRuleShape3D
:
{ before(grammarAccess.getShape3DRule()); }
	 ruleShape3D
{ after(grammarAccess.getShape3DRule()); } 
	 EOF 
;

// Rule Shape3D
ruleShape3D 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShape3DAccess().getGroup()); }
		(rule__Shape3D__Group__0)
		{ after(grammarAccess.getShape3DAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleShape2D
entryRuleShape2D
:
{ before(grammarAccess.getShape2DRule()); }
	 ruleShape2D
{ after(grammarAccess.getShape2DRule()); } 
	 EOF 
;

// Rule Shape2D
ruleShape2D 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShape2DAccess().getGroup()); }
		(rule__Shape2D__Group__0)
		{ after(grammarAccess.getShape2DAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDrawing
entryRuleDrawing
:
{ before(grammarAccess.getDrawingRule()); }
	 ruleDrawing
{ after(grammarAccess.getDrawingRule()); } 
	 EOF 
;

// Rule Drawing
ruleDrawing 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDrawingAccess().getGroup()); }
		(rule__Drawing__Group__0)
		{ after(grammarAccess.getDrawingAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClear
entryRuleClear
:
{ before(grammarAccess.getClearRule()); }
	 ruleClear
{ after(grammarAccess.getClearRule()); } 
	 EOF 
;

// Rule Clear
ruleClear 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClearAccess().getGroup()); }
		(rule__Clear__Group__0)
		{ after(grammarAccess.getClearAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGo
entryRuleGo
:
{ before(grammarAccess.getGoRule()); }
	 ruleGo
{ after(grammarAccess.getGoRule()); } 
	 EOF 
;

// Rule Go
ruleGo 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGoAccess().getGroup()); }
		(rule__Go__Group__0)
		{ after(grammarAccess.getGoAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCircle
entryRuleCircle
:
{ before(grammarAccess.getCircleRule()); }
	 ruleCircle
{ after(grammarAccess.getCircleRule()); } 
	 EOF 
;

// Rule Circle
ruleCircle 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCircleAccess().getGroup()); }
		(rule__Circle__Group__0)
		{ after(grammarAccess.getCircleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLoop
entryRuleLoop
:
{ before(grammarAccess.getLoopRule()); }
	 ruleLoop
{ after(grammarAccess.getLoopRule()); } 
	 EOF 
;

// Rule Loop
ruleLoop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLoopAccess().getGroup()); }
		(rule__Loop__Group__0)
		{ after(grammarAccess.getLoopAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInstructionAccess().getDrawingParserRuleCall_0()); }
		ruleDrawing
		{ after(grammarAccess.getInstructionAccess().getDrawingParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getClearParserRuleCall_1()); }
		ruleClear
		{ after(grammarAccess.getInstructionAccess().getClearParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getGoParserRuleCall_2()); }
		ruleGo
		{ after(grammarAccess.getInstructionAccess().getGoParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getLoopParserRuleCall_3()); }
		ruleLoop
		{ after(grammarAccess.getInstructionAccess().getLoopParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Map__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMapAccess().getAKeyword_0()); }
		'A'
		{ after(grammarAccess.getMapAccess().getAKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getMapAccess().getBKeyword_1()); }
		'B'
		{ after(grammarAccess.getMapAccess().getBKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getMapAccess().getCKeyword_2()); }
		'C'
		{ after(grammarAccess.getMapAccess().getCKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getMapAccess().getDKeyword_3()); }
		'D'
		{ after(grammarAccess.getMapAccess().getDKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getMapAccess().getEKeyword_4()); }
		'E'
		{ after(grammarAccess.getMapAccess().getEKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getMapAccess().getFKeyword_5()); }
		'F'
		{ after(grammarAccess.getMapAccess().getFKeyword_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPointAccess().getPoint3DParserRuleCall_0()); }
		rulePoint3D
		{ after(grammarAccess.getPointAccess().getPoint3DParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPointAccess().getGroup_1()); }
		(rule__Point__Group_1__0)
		{ after(grammarAccess.getPointAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shape__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShapeAccess().getShape2DParserRuleCall_0()); }
		ruleShape2D
		{ after(grammarAccess.getShapeAccess().getShape2DParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getShapeAccess().getShape3DParserRuleCall_1()); }
		ruleShape3D
		{ after(grammarAccess.getShapeAccess().getShape3DParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getShapeAccess().getCircleParserRuleCall_2()); }
		ruleCircle
		{ after(grammarAccess.getShapeAccess().getCircleParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Script__Group__0__Impl
	rule__Script__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScriptAccess().getScriptKeyword_0()); }
	'Script'
	{ after(grammarAccess.getScriptAccess().getScriptKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Script__Group__1__Impl
	rule__Script__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScriptAccess().getNameAssignment_1()); }
	(rule__Script__NameAssignment_1)
	{ after(grammarAccess.getScriptAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Script__Group__2__Impl
	rule__Script__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScriptAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getScriptAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Script__Group__3__Impl
	rule__Script__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScriptAccess().getInstructionsAssignment_3()); }
	(rule__Script__InstructionsAssignment_3)*
	{ after(grammarAccess.getScriptAccess().getInstructionsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Script__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScriptAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getScriptAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Point3D__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Point3D__Group__0__Impl
	rule__Point3D__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Point3D__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPoint3DAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getPoint3DAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Point3D__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Point3D__Group__1__Impl
	rule__Point3D__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Point3D__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPoint3DAccess().getXAssignment_1()); }
	(rule__Point3D__XAssignment_1)
	{ after(grammarAccess.getPoint3DAccess().getXAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Point3D__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Point3D__Group__2__Impl
	rule__Point3D__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Point3D__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPoint3DAccess().getYAssignment_2()); }
	(rule__Point3D__YAssignment_2)
	{ after(grammarAccess.getPoint3DAccess().getYAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Point3D__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Point3D__Group__3__Impl
	rule__Point3D__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Point3D__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPoint3DAccess().getZAssignment_3()); }
	(rule__Point3D__ZAssignment_3)
	{ after(grammarAccess.getPoint3DAccess().getZAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Point3D__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Point3D__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Point3D__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPoint3DAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getPoint3DAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Point2D__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Point2D__Group__0__Impl
	rule__Point2D__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Point2D__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPoint2DAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getPoint2DAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Point2D__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Point2D__Group__1__Impl
	rule__Point2D__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Point2D__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPoint2DAccess().getIAssignment_1()); }
	(rule__Point2D__IAssignment_1)
	{ after(grammarAccess.getPoint2DAccess().getIAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Point2D__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Point2D__Group__2__Impl
	rule__Point2D__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Point2D__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPoint2DAccess().getJAssignment_2()); }
	(rule__Point2D__JAssignment_2)
	{ after(grammarAccess.getPoint2DAccess().getJAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Point2D__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Point2D__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Point2D__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPoint2DAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getPoint2DAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Point__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Point__Group_1__0__Impl
	rule__Point__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPointAccess().getPoint2DParserRuleCall_1_0()); }
	rulePoint2D
	{ after(grammarAccess.getPointAccess().getPoint2DParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Point__Group_1__1__Impl
	rule__Point__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPointAccess().getOnKeyword_1_1()); }
	'on'
	{ after(grammarAccess.getPointAccess().getOnKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Point__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPointAccess().getMapAssignment_1_2()); }
	(rule__Point__MapAssignment_1_2)
	{ after(grammarAccess.getPointAccess().getMapAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Shape3D__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shape3D__Group__0__Impl
	rule__Shape3D__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Shape3D__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShape3DAccess().getShape3DAction_0()); }
	()
	{ after(grammarAccess.getShape3DAccess().getShape3DAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shape3D__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shape3D__Group__1__Impl
	rule__Shape3D__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Shape3D__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShape3DAccess().getShapeKeyword_1()); }
	'shape'
	{ after(grammarAccess.getShape3DAccess().getShapeKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shape3D__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shape3D__Group__2__Impl
	rule__Shape3D__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Shape3D__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShape3DAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getShape3DAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shape3D__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shape3D__Group__3__Impl
	rule__Shape3D__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Shape3D__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShape3DAccess().getPointsAssignment_3()); }
	(rule__Shape3D__PointsAssignment_3)*
	{ after(grammarAccess.getShape3DAccess().getPointsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shape3D__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shape3D__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Shape3D__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShape3DAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getShape3DAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Shape2D__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shape2D__Group__0__Impl
	rule__Shape2D__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Shape2D__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShape2DAccess().getShape2DAction_0()); }
	()
	{ after(grammarAccess.getShape2DAccess().getShape2DAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shape2D__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shape2D__Group__1__Impl
	rule__Shape2D__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Shape2D__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShape2DAccess().getShapeKeyword_1()); }
	'shape'
	{ after(grammarAccess.getShape2DAccess().getShapeKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shape2D__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shape2D__Group__2__Impl
	rule__Shape2D__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Shape2D__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShape2DAccess().getOnKeyword_2()); }
	'on'
	{ after(grammarAccess.getShape2DAccess().getOnKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shape2D__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shape2D__Group__3__Impl
	rule__Shape2D__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Shape2D__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShape2DAccess().getMapAssignment_3()); }
	(rule__Shape2D__MapAssignment_3)
	{ after(grammarAccess.getShape2DAccess().getMapAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shape2D__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shape2D__Group__4__Impl
	rule__Shape2D__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Shape2D__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShape2DAccess().getLeftCurlyBracketKeyword_4()); }
	'{'
	{ after(grammarAccess.getShape2DAccess().getLeftCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shape2D__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shape2D__Group__5__Impl
	rule__Shape2D__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Shape2D__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShape2DAccess().getPointsAssignment_5()); }
	(rule__Shape2D__PointsAssignment_5)*
	{ after(grammarAccess.getShape2DAccess().getPointsAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shape2D__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shape2D__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Shape2D__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShape2DAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getShape2DAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Drawing__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Drawing__Group__0__Impl
	rule__Drawing__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Drawing__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDrawingAccess().getDrawingAction_0()); }
	()
	{ after(grammarAccess.getDrawingAccess().getDrawingAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Drawing__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Drawing__Group__1__Impl
	rule__Drawing__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Drawing__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDrawingAccess().getDrawingKeyword_1()); }
	'drawing'
	{ after(grammarAccess.getDrawingAccess().getDrawingKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Drawing__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Drawing__Group__2__Impl
	rule__Drawing__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Drawing__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDrawingAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getDrawingAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Drawing__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Drawing__Group__3__Impl
	rule__Drawing__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Drawing__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDrawingAccess().getShapesAssignment_3()); }
	(rule__Drawing__ShapesAssignment_3)*
	{ after(grammarAccess.getDrawingAccess().getShapesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Drawing__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Drawing__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Drawing__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDrawingAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getDrawingAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Clear__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clear__Group__0__Impl
	rule__Clear__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Clear__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClearAccess().getClearAction_0()); }
	()
	{ after(grammarAccess.getClearAccess().getClearAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clear__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clear__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Clear__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClearAccess().getClearKeyword_1()); }
	'clear'
	{ after(grammarAccess.getClearAccess().getClearKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Go__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Go__Group__0__Impl
	rule__Go__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Go__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGoAccess().getGoKeyword_0()); }
	'go'
	{ after(grammarAccess.getGoAccess().getGoKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Go__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Go__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Go__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGoAccess().getPointAssignment_1()); }
	(rule__Go__PointAssignment_1)
	{ after(grammarAccess.getGoAccess().getPointAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Circle__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Circle__Group__0__Impl
	rule__Circle__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Circle__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCircleAccess().getCircleKeyword_0()); }
	'circle'
	{ after(grammarAccess.getCircleAccess().getCircleKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Circle__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Circle__Group__1__Impl
	rule__Circle__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Circle__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCircleAccess().getCenterKeyword_1()); }
	'center'
	{ after(grammarAccess.getCircleAccess().getCenterKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Circle__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Circle__Group__2__Impl
	rule__Circle__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Circle__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCircleAccess().getPointAssignment_2()); }
	(rule__Circle__PointAssignment_2)
	{ after(grammarAccess.getCircleAccess().getPointAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Circle__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Circle__Group__3__Impl
	rule__Circle__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Circle__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCircleAccess().getRadiusKeyword_3()); }
	'radius'
	{ after(grammarAccess.getCircleAccess().getRadiusKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Circle__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Circle__Group__4__Impl
	rule__Circle__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Circle__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCircleAccess().getRadiusAssignment_4()); }
	(rule__Circle__RadiusAssignment_4)
	{ after(grammarAccess.getCircleAccess().getRadiusAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Circle__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Circle__Group__5__Impl
	rule__Circle__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Circle__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCircleAccess().getOnKeyword_5()); }
	'on'
	{ after(grammarAccess.getCircleAccess().getOnKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Circle__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Circle__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Circle__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCircleAccess().getMapAssignment_6()); }
	(rule__Circle__MapAssignment_6)
	{ after(grammarAccess.getCircleAccess().getMapAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Loop__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__0__Impl
	rule__Loop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getLoopKeyword_0()); }
	'loop'
	{ after(grammarAccess.getLoopAccess().getLoopKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__1__Impl
	rule__Loop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getNAssignment_1()); }
	(rule__Loop__NAssignment_1)
	{ after(grammarAccess.getLoopAccess().getNAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__2__Impl
	rule__Loop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getLoopAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__3__Impl
	rule__Loop__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getInstructionsAssignment_3()); }
	(rule__Loop__InstructionsAssignment_3)*
	{ after(grammarAccess.getLoopAccess().getInstructionsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getLoopAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Scripts__ScriptAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getScriptsAccess().getScriptScriptParserRuleCall_0()); }
		ruleScript
		{ after(grammarAccess.getScriptsAccess().getScriptScriptParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getScriptAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getScriptAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Script__InstructionsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getScriptAccess().getInstructionsInstructionParserRuleCall_3_0()); }
		ruleInstruction
		{ after(grammarAccess.getScriptAccess().getInstructionsInstructionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Point3D__XAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPoint3DAccess().getXINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getPoint3DAccess().getXINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Point3D__YAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPoint3DAccess().getYINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getPoint3DAccess().getYINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Point3D__ZAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPoint3DAccess().getZINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getPoint3DAccess().getZINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Point2D__IAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPoint2DAccess().getIINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getPoint2DAccess().getIINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Point2D__JAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPoint2DAccess().getJINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getPoint2DAccess().getJINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__MapAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPointAccess().getMapMapParserRuleCall_1_2_0()); }
		ruleMap
		{ after(grammarAccess.getPointAccess().getMapMapParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shape3D__PointsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShape3DAccess().getPointsPoint3DParserRuleCall_3_0()); }
		rulePoint3D
		{ after(grammarAccess.getShape3DAccess().getPointsPoint3DParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shape2D__MapAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShape2DAccess().getMapMapParserRuleCall_3_0()); }
		ruleMap
		{ after(grammarAccess.getShape2DAccess().getMapMapParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shape2D__PointsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShape2DAccess().getPointsPoint2DParserRuleCall_5_0()); }
		rulePoint2D
		{ after(grammarAccess.getShape2DAccess().getPointsPoint2DParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Drawing__ShapesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDrawingAccess().getShapesShapeParserRuleCall_3_0()); }
		ruleShape
		{ after(grammarAccess.getDrawingAccess().getShapesShapeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Go__PointAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGoAccess().getPointPointParserRuleCall_1_0()); }
		rulePoint
		{ after(grammarAccess.getGoAccess().getPointPointParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Circle__PointAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCircleAccess().getPointPoint2DParserRuleCall_2_0()); }
		rulePoint2D
		{ after(grammarAccess.getCircleAccess().getPointPoint2DParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Circle__RadiusAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCircleAccess().getRadiusINTTerminalRuleCall_4_0()); }
		RULE_INT
		{ after(grammarAccess.getCircleAccess().getRadiusINTTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Circle__MapAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCircleAccess().getMapMapParserRuleCall_6_0()); }
		ruleMap
		{ after(grammarAccess.getCircleAccess().getMapMapParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__NAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopAccess().getNINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getLoopAccess().getNINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__InstructionsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopAccess().getInstructionsInstructionParserRuleCall_3_0()); }
		ruleInstruction
		{ after(grammarAccess.getLoopAccess().getInstructionsInstructionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
