/*
 * generated by Xtext 2.17.0
 */
package dume.compiler.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import dume.compiler.ide.contentassist.antlr.internal.InternalDumeParser;
import dume.compiler.services.DumeGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class DumeParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DumeGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DumeGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getInstructionAccess().getAlternatives(), "rule__Instruction__Alternatives");
			builder.put(grammarAccess.getMapAccess().getAlternatives(), "rule__Map__Alternatives");
			builder.put(grammarAccess.getPointAccess().getAlternatives(), "rule__Point__Alternatives");
			builder.put(grammarAccess.getShapeAccess().getAlternatives(), "rule__Shape__Alternatives");
			builder.put(grammarAccess.getScriptAccess().getGroup(), "rule__Script__Group__0");
			builder.put(grammarAccess.getPoint3DAccess().getGroup(), "rule__Point3D__Group__0");
			builder.put(grammarAccess.getPoint2DAccess().getGroup(), "rule__Point2D__Group__0");
			builder.put(grammarAccess.getPointAccess().getGroup_1(), "rule__Point__Group_1__0");
			builder.put(grammarAccess.getShape3DAccess().getGroup(), "rule__Shape3D__Group__0");
			builder.put(grammarAccess.getShape2DAccess().getGroup(), "rule__Shape2D__Group__0");
			builder.put(grammarAccess.getDrawingAccess().getGroup(), "rule__Drawing__Group__0");
			builder.put(grammarAccess.getClearAccess().getGroup(), "rule__Clear__Group__0");
			builder.put(grammarAccess.getGoAccess().getGroup(), "rule__Go__Group__0");
			builder.put(grammarAccess.getCircleAccess().getGroup(), "rule__Circle__Group__0");
			builder.put(grammarAccess.getLoopAccess().getGroup(), "rule__Loop__Group__0");
			builder.put(grammarAccess.getScriptsAccess().getScriptAssignment(), "rule__Scripts__ScriptAssignment");
			builder.put(grammarAccess.getScriptAccess().getNameAssignment_1(), "rule__Script__NameAssignment_1");
			builder.put(grammarAccess.getScriptAccess().getInstructionsAssignment_3(), "rule__Script__InstructionsAssignment_3");
			builder.put(grammarAccess.getPoint3DAccess().getXAssignment_1(), "rule__Point3D__XAssignment_1");
			builder.put(grammarAccess.getPoint3DAccess().getYAssignment_2(), "rule__Point3D__YAssignment_2");
			builder.put(grammarAccess.getPoint3DAccess().getZAssignment_3(), "rule__Point3D__ZAssignment_3");
			builder.put(grammarAccess.getPoint2DAccess().getIAssignment_1(), "rule__Point2D__IAssignment_1");
			builder.put(grammarAccess.getPoint2DAccess().getJAssignment_2(), "rule__Point2D__JAssignment_2");
			builder.put(grammarAccess.getPointAccess().getMapAssignment_1_2(), "rule__Point__MapAssignment_1_2");
			builder.put(grammarAccess.getShape3DAccess().getPointsAssignment_3(), "rule__Shape3D__PointsAssignment_3");
			builder.put(grammarAccess.getShape2DAccess().getMapAssignment_3(), "rule__Shape2D__MapAssignment_3");
			builder.put(grammarAccess.getShape2DAccess().getPointsAssignment_5(), "rule__Shape2D__PointsAssignment_5");
			builder.put(grammarAccess.getDrawingAccess().getShapesAssignment_3(), "rule__Drawing__ShapesAssignment_3");
			builder.put(grammarAccess.getGoAccess().getPointAssignment_1(), "rule__Go__PointAssignment_1");
			builder.put(grammarAccess.getCircleAccess().getPointAssignment_2(), "rule__Circle__PointAssignment_2");
			builder.put(grammarAccess.getCircleAccess().getRadiusAssignment_4(), "rule__Circle__RadiusAssignment_4");
			builder.put(grammarAccess.getCircleAccess().getMapAssignment_6(), "rule__Circle__MapAssignment_6");
			builder.put(grammarAccess.getLoopAccess().getNAssignment_1(), "rule__Loop__NAssignment_1");
			builder.put(grammarAccess.getLoopAccess().getInstructionsAssignment_3(), "rule__Loop__InstructionsAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DumeGrammarAccess grammarAccess;

	@Override
	protected InternalDumeParser createParser() {
		InternalDumeParser result = new InternalDumeParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DumeGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DumeGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
