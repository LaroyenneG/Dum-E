/*
 * generated by Xtext 2.17.0
 */
package dume.compiler.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import dume.compiler.dume.Script
import dume.compiler.dume.Instruction
import dume.compiler.dume.Drawing
import dume.compiler.dume.Clear
import dume.compiler.dume.Go
import dume.compiler.dume.Point
import dume.compiler.dume.Shape
import dume.compiler.dume.Point2D
import dume.compiler.dume.Point3D
import dume.compiler.dume.Shape2D
import dume.compiler.dume.Shape3D
import dume.compiler.dume.Loop

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DumeGenerator extends AbstractGenerator {

	static int mapDistance = 50;
	static double scale = 100;

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {

		for (e : resource.allContents.toIterable.filter(Script)) {
			fsa.generateFile(e.name + ".sbot", e.compile)
		}
	}

	def compile(Shape2D shape) '''
		«FOR point : shape.points»
			«goPoint2D(point.i,point.j, shape.map)»
		«ENDFOR»
	'''

	def compile(Shape3D shape) '''
		«FOR point : shape.points»
			«point.compile»
		«ENDFOR»
	'''

	def compile(Shape shape) {
		return switch shape {
			Shape2D: (shape as Shape2D).compile
			Shape3D: (shape as Shape3D).compile
			default: '''error'''
		}

	}

	def goPoint2D(int i, int j, String map) {

		var x = 0;
		var y = 0;
		var z = 0;

		if (map == "A") {
			x = i - mapDistance;
			y = j + mapDistance;
			z = mapDistance;
		} else if (map == "") {
		} else if (map == "") {
		}

		return goPoint3D(x, y, z);
	}

	def goPoint3D(int x, int y, int z) '''
		go «x/scale» «y/scale» «z/scale»
	'''

	def compile(Point3D point) {
		return goPoint3D(point.x, point.y, point.z);
	}

	def compile(Point point) {
		return switch point {
			Point2D:
				goPoint2D((point as Point2D).i, (point as Point2D).j, point.map)
			Point3D:
				(point as Point3D).compile
			default: '''error'''
		}
	}

	def compile(Go go) '''
		go «go.point.compile»
	'''

	def compile(Drawing drawing) '''
		«FOR shape : drawing.shapes»
			organ on
			«shape.compile»
			organ off
		«ENDFOR»
	'''

	def compile(Clear clear) '''
		clear
	'''

	def compile(Instruction instruction) {
		return switch instruction {
			Drawing:
				(instruction as Drawing).compile
			Clear:
				(instruction as Clear).compile
			Go:
				(instruction as Go).compile
			Loop:
				(instruction as Loop).compile
			default: '''
				error
			'''
		}
	}

	def compile(Loop loop) '''
		«FOR i : 0..loop.n»
			«FOR instruction : loop.instructions»
				«instruction.compile»
			«ENDFOR»
		«ENDFOR»
	'''

	def compile(Script robotScript) '''
		«FOR instruction : robotScript.instructions»
			«instruction.compile»
		«ENDFOR»
	'''
}
