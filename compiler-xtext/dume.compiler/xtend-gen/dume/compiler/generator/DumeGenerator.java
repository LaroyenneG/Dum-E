/**
 * generated by Xtext 2.17.0
 */
package dume.compiler.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import dume.compiler.dume.Clear;
import dume.compiler.dume.Drawing;
import dume.compiler.dume.Go;
import dume.compiler.dume.Instruction;
import dume.compiler.dume.Loop;
import dume.compiler.dume.Point;
import dume.compiler.dume.Point2D;
import dume.compiler.dume.Point3D;
import dume.compiler.dume.Script;
import dume.compiler.dume.Shape;
import dume.compiler.dume.Shape2D;
import dume.compiler.dume.Shape3D;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IntegerRange;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class DumeGenerator extends AbstractGenerator {
  private static int mapDistance = 50;
  
  private static double scale = 100;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Script> _filter = Iterables.<Script>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Script.class);
    for (final Script e : _filter) {
      String _name = e.getName();
      String _plus = (_name + ".sbot");
      fsa.generateFile(_plus, this.compile(e));
    }
  }
  
  public CharSequence compile(final Shape2D shape) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Point2D> _points = shape.getPoints();
      for(final Point2D point : _points) {
        CharSequence _goPoint2D = this.goPoint2D(point.getI(), point.getJ(), shape.getMap());
        _builder.append(_goPoint2D);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Shape3D shape) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Point3D> _points = shape.getPoints();
      for(final Point3D point : _points) {
        CharSequence _compile = this.compile(point);
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Shape shape) {
    CharSequence _switchResult = null;
    boolean _matched = false;
    if (shape instanceof Shape2D) {
      _matched=true;
      _switchResult = this.compile(((Shape2D) shape));
    }
    if (!_matched) {
      if (shape instanceof Shape3D) {
        _matched=true;
        _switchResult = this.compile(((Shape3D) shape));
      }
    }
    if (!_matched) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("error");
      _switchResult = _builder.toString();
    }
    return _switchResult;
  }
  
  public CharSequence goPoint2D(final int i, final int j, final String map) {
    int x = 0;
    int y = 0;
    int z = 0;
    boolean _equals = Objects.equal(map, "A");
    if (_equals) {
      x = (i - DumeGenerator.mapDistance);
      y = (j + DumeGenerator.mapDistance);
      z = DumeGenerator.mapDistance;
    } else {
      boolean _equals_1 = Objects.equal(map, "");
      if (_equals_1) {
      } else {
        boolean _equals_2 = Objects.equal(map, "");
        if (_equals_2) {
        }
      }
    }
    return this.goPoint3D(x, y, z);
  }
  
  public CharSequence goPoint3D(final int x, final int y, final int z) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("go ");
    _builder.append((x / DumeGenerator.scale));
    _builder.append(" ");
    _builder.append((y / DumeGenerator.scale));
    _builder.append(" ");
    _builder.append((z / DumeGenerator.scale));
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final Point3D point) {
    return this.goPoint3D(point.getX(), point.getY(), point.getZ());
  }
  
  public CharSequence compile(final Point point) {
    CharSequence _switchResult = null;
    boolean _matched = false;
    if (point instanceof Point2D) {
      _matched=true;
      _switchResult = this.goPoint2D(((Point2D) point).getI(), ((Point2D) point).getJ(), ((Point2D)point).getMap());
    }
    if (!_matched) {
      if (point instanceof Point3D) {
        _matched=true;
        _switchResult = this.compile(((Point3D) point));
      }
    }
    if (!_matched) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("error");
      _switchResult = _builder.toString();
    }
    return _switchResult;
  }
  
  public CharSequence compile(final Go go) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("go ");
    CharSequence _compile = this.compile(go.getPoint());
    _builder.append(_compile);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final Drawing drawing) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Shape> _shapes = drawing.getShapes();
      for(final Shape shape : _shapes) {
        _builder.append("organ on");
        _builder.newLine();
        CharSequence _compile = this.compile(shape);
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
        _builder.append("organ off");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Clear clear) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("clear");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Instruction instruction) {
    CharSequence _switchResult = null;
    boolean _matched = false;
    if (instruction instanceof Drawing) {
      _matched=true;
      _switchResult = this.compile(((Drawing) instruction));
    }
    if (!_matched) {
      if (instruction instanceof Clear) {
        _matched=true;
        _switchResult = this.compile(((Clear) instruction));
      }
    }
    if (!_matched) {
      if (instruction instanceof Go) {
        _matched=true;
        _switchResult = this.compile(((Go) instruction));
      }
    }
    if (!_matched) {
      if (instruction instanceof Loop) {
        _matched=true;
        _switchResult = this.compile(((Loop) instruction));
      }
    }
    if (!_matched) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("error");
      _builder.newLine();
      _switchResult = _builder.toString();
    }
    return _switchResult;
  }
  
  public CharSequence compile(final Loop loop) {
    StringConcatenation _builder = new StringConcatenation();
    {
      int _n = loop.getN();
      IntegerRange _upTo = new IntegerRange(0, _n);
      for(final Integer i : _upTo) {
        {
          EList<Instruction> _instructions = loop.getInstructions();
          for(final Instruction instruction : _instructions) {
            Object _compile = this.compile(instruction);
            _builder.append(_compile);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Script robotScript) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Instruction> _instructions = robotScript.getInstructions();
      for(final Instruction instruction : _instructions) {
        CharSequence _compile = this.compile(instruction);
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
}
