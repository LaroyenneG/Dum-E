/**
 * generated by Xtext 2.17.0
 */
package dume.compiler.dume.util;

import dume.compiler.dume.Circle;
import dume.compiler.dume.Drawing;
import dume.compiler.dume.DumePackage;
import dume.compiler.dume.Go;
import dume.compiler.dume.Instruction;
import dume.compiler.dume.Loop;
import dume.compiler.dume.Negative;
import dume.compiler.dume.Point;
import dume.compiler.dume.Point2D;
import dume.compiler.dume.Point3D;
import dume.compiler.dume.Positive;
import dume.compiler.dume.Script;
import dume.compiler.dume.Scripts;
import dume.compiler.dume.Shape;
import dume.compiler.dume.Shape2D;
import dume.compiler.dume.Shape3D;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see dume.compiler.dume.DumePackage
 * @generated
 */
public class DumeAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static DumePackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DumeAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = DumePackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DumeSwitch<Adapter> modelSwitch =
    new DumeSwitch<Adapter>()
    {
      @Override
      public Adapter caseScripts(Scripts object)
      {
        return createScriptsAdapter();
      }
      @Override
      public Adapter caseScript(Script object)
      {
        return createScriptAdapter();
      }
      @Override
      public Adapter caseNumber(dume.compiler.dume.Number object)
      {
        return createNumberAdapter();
      }
      @Override
      public Adapter caseNegative(Negative object)
      {
        return createNegativeAdapter();
      }
      @Override
      public Adapter casePositive(Positive object)
      {
        return createPositiveAdapter();
      }
      @Override
      public Adapter caseInstruction(Instruction object)
      {
        return createInstructionAdapter();
      }
      @Override
      public Adapter casePoint3D(Point3D object)
      {
        return createPoint3DAdapter();
      }
      @Override
      public Adapter casePoint2D(Point2D object)
      {
        return createPoint2DAdapter();
      }
      @Override
      public Adapter casePoint(Point object)
      {
        return createPointAdapter();
      }
      @Override
      public Adapter caseShape(Shape object)
      {
        return createShapeAdapter();
      }
      @Override
      public Adapter caseShape3D(Shape3D object)
      {
        return createShape3DAdapter();
      }
      @Override
      public Adapter caseShape2D(Shape2D object)
      {
        return createShape2DAdapter();
      }
      @Override
      public Adapter caseDrawing(Drawing object)
      {
        return createDrawingAdapter();
      }
      @Override
      public Adapter caseGo(Go object)
      {
        return createGoAdapter();
      }
      @Override
      public Adapter caseCircle(Circle object)
      {
        return createCircleAdapter();
      }
      @Override
      public Adapter caseLoop(Loop object)
      {
        return createLoopAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link dume.compiler.dume.Scripts <em>Scripts</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dume.compiler.dume.Scripts
   * @generated
   */
  public Adapter createScriptsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dume.compiler.dume.Script <em>Script</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dume.compiler.dume.Script
   * @generated
   */
  public Adapter createScriptAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dume.compiler.dume.Number <em>Number</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dume.compiler.dume.Number
   * @generated
   */
  public Adapter createNumberAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dume.compiler.dume.Negative <em>Negative</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dume.compiler.dume.Negative
   * @generated
   */
  public Adapter createNegativeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dume.compiler.dume.Positive <em>Positive</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dume.compiler.dume.Positive
   * @generated
   */
  public Adapter createPositiveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dume.compiler.dume.Instruction <em>Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dume.compiler.dume.Instruction
   * @generated
   */
  public Adapter createInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dume.compiler.dume.Point3D <em>Point3 D</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dume.compiler.dume.Point3D
   * @generated
   */
  public Adapter createPoint3DAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dume.compiler.dume.Point2D <em>Point2 D</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dume.compiler.dume.Point2D
   * @generated
   */
  public Adapter createPoint2DAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dume.compiler.dume.Point <em>Point</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dume.compiler.dume.Point
   * @generated
   */
  public Adapter createPointAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dume.compiler.dume.Shape <em>Shape</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dume.compiler.dume.Shape
   * @generated
   */
  public Adapter createShapeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dume.compiler.dume.Shape3D <em>Shape3 D</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dume.compiler.dume.Shape3D
   * @generated
   */
  public Adapter createShape3DAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dume.compiler.dume.Shape2D <em>Shape2 D</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dume.compiler.dume.Shape2D
   * @generated
   */
  public Adapter createShape2DAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dume.compiler.dume.Drawing <em>Drawing</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dume.compiler.dume.Drawing
   * @generated
   */
  public Adapter createDrawingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dume.compiler.dume.Go <em>Go</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dume.compiler.dume.Go
   * @generated
   */
  public Adapter createGoAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dume.compiler.dume.Circle <em>Circle</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dume.compiler.dume.Circle
   * @generated
   */
  public Adapter createCircleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link dume.compiler.dume.Loop <em>Loop</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see dume.compiler.dume.Loop
   * @generated
   */
  public Adapter createLoopAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //DumeAdapterFactory
